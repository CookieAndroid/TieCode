
//此类的一切代码均在执行方法的线程内生效！！
@导入Java("android.os.Looper")
@导入Java("android.os.Handler")
类 当前线程
	//想要在当前线程中使用一切跟消息/消息处理器相关的功能，必须先执行此方法
	@静态
	方法 初始化消息队列()
		code Looper.prepare();
	结束 方法
	//开启消息循环之后才能正常处理消息的传递 一般和上面的方法一起使用
	@静态
	方法 开启消息循环()
		code Looper.loop();
	结束 方法
	//此方法会立即停止消息循环，即使当前消息队列中还有未处理的消息。
	@静态
	方法 立即停止消息循环()
		code Looper.myLooper().quit();
	结束 方法
	//此方法会安全地停止消息循环。它会等待当前消息队列中所有已经发出的消息处理完毕后，再停止消息循环。这确保了所有已经排队的消息都能得到处理。
	@静态
	方法 等待停止消息循环()
		code Looper.myLooper().quitSafely();
	结束 方法
	@静态
	方法 创建消息处理器():消息处理器
		返回 创建 消息处理器
	结束 方法
结束 类
类 基础线程:安卓线程
	@code
		@Override
	public void run() {
		#被启动();
	}
	@end
	定义事件 被启动()
结束 类
类 基础任务:可执行任务
	@导入Java("android.os.Handler")
	方法 提交到消息处理器(欲使用对象:消息处理器)
		code #欲使用对象.post(this);
	结束 方法
结束 类